{"ast":null,"code":"var _jsxFileName = \"/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/MessageList/index.js\";\nimport React, { useEffect, useState, useContext, Component } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext';\nimport './MessageList.css';\nimport axios from 'axios';\nimport AuthContext from '../../context/AuthContext';\nexport default class MessageList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.update = () => {\n      const {\n        auth\n      } = this.context;\n      axios.get('https://localhost:4000/v1/channels/' + this.state.currentChannel, {\n        headers: {\n          \"Authorization\": auth.token\n        }\n      }).then(response => {\n        let msgs = response.data.map(results => {\n          return {\n            author: results.creatorID,\n            message: results.body,\n            timestamp: results.createdAt\n          };\n        });\n        this.setState({\n          messages: msgs\n        });\n      });\n    };\n\n    this.renderMessages = messages => {\n      let MY_USER_ID = this.props.currentUserID;\n      let i = 0;\n      let messageCount = messages.length;\n      let tempMessages = [];\n\n      while (i < messageCount) {\n        let previous = messages[i - 1];\n        let current = messages[i];\n        let next = messages[i + 1];\n        let isMine = current.author === MY_USER_ID;\n        let currentMoment = moment(current.timestamp);\n        let prevBySameAuthor = false;\n        let nextBySameAuthor = false;\n        let startsSequence = true;\n        let endsSequence = true;\n        let showTimestamp = true;\n\n        if (previous) {\n          let previousMoment = moment(previous.timestamp);\n          let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.author === current.author;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          let nextMoment = moment(next.timestamp);\n          let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.author === current.author;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        tempMessages.push( /*#__PURE__*/React.createElement(Message, {\n          key: i,\n          isMine: isMine,\n          startsSequence: startsSequence,\n          endsSequence: endsSequence,\n          showTimestamp: showTimestamp,\n          data: current,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 9\n          }\n        })); // Proceed to the next message.\n\n        i += 1;\n      }\n\n      return tempMessages;\n    };\n\n    this.state = {\n      currentChannel: this.props.currentChannel,\n      currentChannelName: this.props.currentChannelName,\n      currentUserID: this.props.currentUserID,\n      messages: []\n    };\n    this.update = this.update.bind(this);\n  }\n\n  componentDidMount() {\n    const auth = this.context;\n  }\n\n  componentWillReceiveProps(newProps) {\n    const {\n      auth\n    } = this.context;\n    axios.get('https://localhost:4000/v1/channels/' + newProps.currentChannel, {\n      headers: {\n        \"Authorization\": auth.token\n      }\n    }).then(response => {\n      console.log(response.data);\n      let msgs = response.data.map(results => {\n        return {\n          author: results.creatorID,\n          message: results.body,\n          timestamp: results.createdAt\n        };\n      });\n      this.setState({\n        messages: msgs\n      });\n    });\n    this.setState({\n      currentChannel: newProps.currentChannel\n    });\n  }\n\n  render() {\n    const channelExists = this.state.currentChannel != \"\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      title: this.props.currentChannelName,\n      rightItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"info\",\n        icon: \"ion-ios-information-circle-outline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"video\",\n        icon: \"ion-ios-videocam\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"phone\",\n        icon: \"ion-ios-call\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), channelExists ? /*#__PURE__*/React.createElement(Compose, {\n      currentChannel: this.state.currentChannel,\n      update: this.update,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, \"Create or Join Channel to Start\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-list-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, this.renderMessages(this.state.messages)));\n  }\n\n}\nMessageList.contextType = AuthContext;","map":{"version":3,"sources":["/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/MessageList/index.js"],"names":["React","useEffect","useState","useContext","Component","Compose","Toolbar","ToolbarButton","Message","moment","ChannelContext","axios","AuthContext","MessageList","constructor","props","update","auth","context","get","state","currentChannel","headers","token","then","response","msgs","data","map","results","author","creatorID","message","body","timestamp","createdAt","setState","messages","renderMessages","MY_USER_ID","currentUserID","i","messageCount","length","tempMessages","previous","current","next","isMine","currentMoment","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","currentChannelName","bind","componentDidMount","componentWillReceiveProps","newProps","console","log","render","channelExists","contextType"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, Component} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext'\nimport './MessageList.css';\nimport axios from 'axios';\nimport AuthContext from '../../context/AuthContext';\n\nexport default class MessageList extends Component {\n  static contextType = AuthContext\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentChannel: this.props.currentChannel,\n      currentChannelName: this.props.currentChannelName,\n      currentUserID: this.props.currentUserID,\n      messages: []\n    }\n    this.update = this.update.bind(this);\n  }\n  componentDidMount() {\n    const auth = this.context;\n  }\n  componentWillReceiveProps(newProps) {\n    const {auth} = this.context\n    axios.get('https://localhost:4000/v1/channels/'+ newProps.currentChannel, \n    {\n      headers: {\n        \"Authorization\": auth.token\n      }\n    }\n    ).then(response => {\n        console.log(response.data);\n        let msgs = response.data.map(results => {\n          return {\n            author: results.creatorID,\n            message: results.body,\n            timestamp: results.createdAt,\n          }\n        })\n        this.setState({messages: msgs});\n    });\n    this.setState({currentChannel: newProps.currentChannel});\n  }\n\n  update =() => {\n    const {auth} = this.context\n    axios.get('https://localhost:4000/v1/channels/'+ this.state.currentChannel, \n    {\n      headers: {\n        \"Authorization\": auth.token\n      }\n    }\n    ).then(response => {\n        let msgs = response.data.map(results => {\n          return {\n            author: results.creatorID,\n            message: results.body,\n            timestamp: results.createdAt,\n          }\n        })\n        this.setState({messages: msgs});\n      });\n  }\n  renderMessages = (messages) => {\n    let MY_USER_ID = this.props.currentUserID;\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n    return tempMessages;\n  }\n  render() {\n    const channelExists = this.state.currentChannel != \"\"\n    return(        \n      <div className=\"message-list\">\n        <Toolbar\n          title={this.props.currentChannelName}\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n        {channelExists \n          ? <Compose currentChannel={this.state.currentChannel} update={this.update}/>\n          : <h1>Create or Join Channel to Start</h1>\n        }\n        <div className=\"message-list-container\">\n          {\n            this.renderMessages(this.state.messages)\n          }\n          </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}