{"ast":null,"code":"var _jsxFileName = \"/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/MessageList/index.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext';\nimport './MessageList.css';\nimport Axios from 'axios';\nexport default function MessageList(props) {\n  const MY_USER_ID = 'apple';\n  const [messages, setMessages] = useState([]);\n  const channelContext = useContext(ChannelContext);\n  useEffect(() => {\n    getMessages();\n  }, []);\n\n  const getMessages = () => {\n    var tempMessages = [{\n      id: 1,\n      author: 'apple',\n      message: \"hi\",\n      timestamp: new Date().getTime()\n    }];\n    setMessages([...messages, ...tempMessages]);\n  };\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push( /*#__PURE__*/React.createElement(Message, {\n        key: i,\n        isMine: isMine,\n        startsSequence: startsSequence,\n        endsSequence: endsSequence,\n        showTimestamp: showTimestamp,\n        data: current,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      })); // Proceed to the next message.\n\n      i += 1;\n    }\n\n    return tempMessages;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    title: \"Conversation Title\",\n    rightItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"info\",\n      icon: \"ion-ios-information-circle-outline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"video\",\n      icon: \"ion-ios-videocam\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"phone\",\n      icon: \"ion-ios-call\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, renderMessages()), /*#__PURE__*/React.createElement(Compose, {\n    rightItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"photo\",\n      icon: \"ion-ios-camera\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"image\",\n      icon: \"ion-ios-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"audio\",\n      icon: \"ion-ios-mic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"money\",\n      icon: \"ion-ios-card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"games\",\n      icon: \"ion-logo-game-controller-b\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ToolbarButton, {\n      key: \"emoji\",\n      icon: \"ion-ios-happy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/MessageList/index.js"],"names":["React","useEffect","useState","useContext","Compose","Toolbar","ToolbarButton","Message","moment","ChannelContext","Axios","MessageList","props","MY_USER_ID","messages","setMessages","channelContext","getMessages","tempMessages","id","author","message","timestamp","Date","getTime","renderMessages","i","messageCount","length","previous","current","next","isMine","currentMoment","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext'\nimport './MessageList.css';\nimport Axios from 'axios';\n\n\nexport default function MessageList(props) {\n  const MY_USER_ID = 'apple';\n  const [messages, setMessages] = useState([])\n  const channelContext = useContext(ChannelContext)\n  useEffect(() => {\n    getMessages();\n  },[])\n  \n  const getMessages = () => {\n     var tempMessages = [\n        {\n          id: 1,\n          author: 'apple',\n          message: \"hi\",\n          timestamp: new Date().getTime()\n        },\n      ]\n      setMessages([...messages, ...tempMessages])\n  }\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let tempMessages = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      tempMessages.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return tempMessages;\n  }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}