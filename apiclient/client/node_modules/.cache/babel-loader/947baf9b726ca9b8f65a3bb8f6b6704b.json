{"ast":null,"code":"var _jsxFileName = \"/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/ConversationList/index.js\";\nimport React, { useState, useEffect, useContext, useRef, Component } from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport MessageList from '../MessageList';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\nimport AuthContext from \"../../context/AuthContext\";\nimport './ConversationList.css';\nimport Axios from 'axios'; // export default function ConversationList(props) {\n//   const [conversations, setConversations] = useState([]);\n//   const authentication = useContext(AuthContext);\n//   const [name, setChannelName] = useState(\"\");\n//   const [description, setDescription] = useState(\"\")\n//   const [channelType, setChannelType] = useState(\"public\")\n//   useEffect(() => {\n//     getChannels()\n//   },[])\n//  const getChannels = () => {\n//     axios.get('https://localhost:4000/v1/channels', \n//     {\n//       headers: {\n//         \"Authorization\": authentication.auth.token\n//       }\n//     }\n//     ).then(response => {\n//         let channels = response.data.map(results => {\n//           return {\n//             name: results.name,\n//             description: results.description,\n//             channelID: results.id\n//           }\n//         })\n//         setConversations([...conversations, ...channels])\n//     });\n//   }\n//   function postChannels(e) {\n//     e.preventDefault();\n//     Axios({\n//       method: 'POST', \n//       url: \"https://localhost:4000/v1/channels\",\n//       headers: {\n//           Authorization: authentication.auth.token\n//       },\n//       data: {\n//           name: name,\n//           description: description,\n//           private: channelType == \"private\"\n//       }\n//     }).then(result => {\n//         if (result.status == 200) {\n//           window.location.reload(false);\n//         }\n//     }).catch(e => {\n//         console.log(e);\n//     })\n//    } \n//     return (\n//       <div className=\"conversation-list\">\n//         <Toolbar\n//           title=\"Channels\"\n//           leftItems={[\n//             <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n//           ]}\n//           rightItems={[\n//             // <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n//             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 8 8\"data-toggle=\"modal\" data-target=\"#channelModal\" data-whatever=\"@mdo\" >\n//               <path d=\"M3 0v3h-3v2h3v3h2v-3h3v-2h-3v-3h-2z\" />\n//             </svg>\n//           ]}\n//         />\n//         <ConversationSearch />\n//         {\n//           conversations.map(conversation =>\n//             <ConversationListItem\n//               key={conversation.name}\n//               data={conversation}\n//             />\n//           )\n//         }\n//         <div class=\"signup-form\">\n//           <div class=\"modal fade\" id=\"channelModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//               <div class=\"modal-dialog\" role=\"document\">\n//                   <form class=\"form-horizontal\">\n//                       <div class=\"col-xs-8 col-xs-offset-4\">\n//                           <h2>Create Channel</h2>\n//                       </div>\t\t\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\">Channel Name</label>\n//                           <div class=\"col-xs-8\">\n//                               <input type=\"text\" class=\"form-control\" name=\"channel_name\" required=\"required\" value ={name} onChange={e => {setChannelName(e.target.value)}}/>\n//                           </div>        \t\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\">Description</label>\n//                           <div class=\"col-xs-8\">\n//                               <input type=\"text\" class=\"form-control\" name=\"channel_description\" value ={description} onChange={e => {setDescription(e.target.value)}}\n//                               />\n//                           </div>        \t\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\" for=\"defaultChecked\">Public</label>\n//                           <div class=\"col-xs-8\">\n//                             <input type=\"radio\" class=\"custom-control-input\" id=\"defaultChecked\" value = \"public\" name=\"defaultExampleRadios\" onClick={e => {setChannelType(e.target.value)}} checked/>\n//                           </div>\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\" for=\"defaultUnchecked\">Private</label>\n//                           <div class=\"col-xs-8\">\n//                             <input type=\"radio\" class=\"custom-control-input\" id=\"defaultUnchecked\" value = \"private\" name=\"defaultExampleRadios\" onClick={e => {setChannelType(e.target.value)}}/>\n//                           </div>\n//                       </div>\n//                       <div id =\"update-response\" class=\"text-center\">\n//                           {/* <p style={{color: this.state.color}}>{this.state.message}</p> */}\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <div class=\"col-xs-8 col-xs-offset-4\">\n//                               <button class=\"btn btn-primary btn-sm\" onClick={e => postChannels(e)}>Create</button>\n//                           </div>  \n//                           <div class=\"col-xs-8 col-xs-offset-4\">\n//                           <button type=\"button\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\"\n//                           >\n//                               Cancel</button>\n//                       </div> \n//                       </div>\t\n//                   </form>\n//               </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n// }\n\nexport default class ConversationList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentChannel = (e, channelID) => {\n      e.preventDefault();\n      this.setState({\n        currentChannel: channelID\n      });\n    };\n\n    this.state = {\n      conversations: [],\n      currentChannel: this.props.currentChannel\n    };\n    this.updateCurrentChannel = this.updateCurrentChannel.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      auth\n    } = this.context;\n    axios.get('https://localhost:4000/v1/channels', {\n      headers: {\n        \"Authorization\": auth.token\n      }\n    }).then(response => {\n      let channels = response.data.map(results => {\n        return {\n          name: results.name,\n          description: results.description,\n          channelID: results.id\n        };\n      });\n      this.setState({\n        conversations: channels\n      });\n    });\n  } // postChannels = (e) => {\n  //   const {auth} = this.context\n  //   e.preventDefault();\n  //   Axios({\n  //     method: 'POST', \n  //     url: \"https://localhost:4000/v1/channels\",\n  //     headers: {\n  //         Authorization: auth.token\n  //     },\n  //     data: {\n  //         name: name,\n  //         description: description,\n  //         private: channelType == \"private\"\n  //     }\n  //   }).then(result => {\n  //       if (result.status == 200) {\n  //         window.location.reload(false);\n  //       }\n  //   }).catch(e => {\n  //       console.log(e);\n  //   })\n  //  } \n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conversation-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      title: \"Channels\",\n      leftItems: [/*#__PURE__*/React.createElement(ToolbarButton, {\n        key: \"cog\",\n        icon: \"ion-ios-cog\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      })],\n      rightItems: [\n      /*#__PURE__*/\n      // <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n      React.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"30\",\n        height: \"30\",\n        viewBox: \"0 0 8 8\",\n        \"data-toggle\": \"modal\",\n        \"data-target\": \"#channelModal\",\n        \"data-whatever\": \"@mdo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M3 0v3h-3v2h3v3h2v-3h3v-2h-3v-3h-2z\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }))],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ConversationSearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }), this.state.conversations.map(conversation => /*#__PURE__*/React.createElement(ConversationListItem, {\n      key: conversation.name,\n      data: conversation,\n      updateCurrentChannel: this.updateCurrentChannel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\nConversationList.contextType = AuthContext;","map":{"version":3,"sources":["/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/ConversationList/index.js"],"names":["React","useState","useEffect","useContext","useRef","Component","ConversationSearch","ConversationListItem","MessageList","Toolbar","ToolbarButton","axios","AuthContext","Axios","ConversationList","constructor","props","updateCurrentChannel","e","channelID","preventDefault","setState","currentChannel","state","conversations","bind","componentDidMount","auth","context","get","headers","token","then","response","channels","data","map","results","name","description","id","render","conversation","contextType"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, useRef, Component} from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport MessageList from '../MessageList';\n\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\nimport AuthContext from \"../../context/AuthContext\"\nimport './ConversationList.css';\nimport Axios from 'axios';\n\n// export default function ConversationList(props) {\n//   const [conversations, setConversations] = useState([]);\n//   const authentication = useContext(AuthContext);\n//   const [name, setChannelName] = useState(\"\");\n//   const [description, setDescription] = useState(\"\")\n//   const [channelType, setChannelType] = useState(\"public\")\n//   useEffect(() => {\n//     getChannels()\n//   },[])\n\n//  const getChannels = () => {\n//     axios.get('https://localhost:4000/v1/channels', \n//     {\n//       headers: {\n//         \"Authorization\": authentication.auth.token\n//       }\n//     }\n//     ).then(response => {\n//         let channels = response.data.map(results => {\n//           return {\n//             name: results.name,\n//             description: results.description,\n//             channelID: results.id\n//           }\n//         })\n//         setConversations([...conversations, ...channels])\n//     });\n//   }\n\n//   function postChannels(e) {\n//     e.preventDefault();\n//     Axios({\n//       method: 'POST', \n//       url: \"https://localhost:4000/v1/channels\",\n//       headers: {\n//           Authorization: authentication.auth.token\n//       },\n//       data: {\n//           name: name,\n//           description: description,\n//           private: channelType == \"private\"\n//       }\n//     }).then(result => {\n//         if (result.status == 200) {\n//           window.location.reload(false);\n//         }\n//     }).catch(e => {\n//         console.log(e);\n//     })\n//    } \n\n//     return (\n//       <div className=\"conversation-list\">\n//         <Toolbar\n//           title=\"Channels\"\n//           leftItems={[\n//             <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n//           ]}\n//           rightItems={[\n//             // <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n//             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 8 8\"data-toggle=\"modal\" data-target=\"#channelModal\" data-whatever=\"@mdo\" >\n//               <path d=\"M3 0v3h-3v2h3v3h2v-3h3v-2h-3v-3h-2z\" />\n//             </svg>\n//           ]}\n//         />\n//         <ConversationSearch />\n//         {\n//           conversations.map(conversation =>\n//             <ConversationListItem\n//               key={conversation.name}\n//               data={conversation}\n//             />\n//           )\n//         }\n//         <div class=\"signup-form\">\n//           <div class=\"modal fade\" id=\"channelModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//               <div class=\"modal-dialog\" role=\"document\">\n//                   <form class=\"form-horizontal\">\n//                       <div class=\"col-xs-8 col-xs-offset-4\">\n//                           <h2>Create Channel</h2>\n//                       </div>\t\t\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\">Channel Name</label>\n//                           <div class=\"col-xs-8\">\n//                               <input type=\"text\" class=\"form-control\" name=\"channel_name\" required=\"required\" value ={name} onChange={e => {setChannelName(e.target.value)}}/>\n//                           </div>        \t\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\">Description</label>\n//                           <div class=\"col-xs-8\">\n//                               <input type=\"text\" class=\"form-control\" name=\"channel_description\" value ={description} onChange={e => {setDescription(e.target.value)}}\n//                               />\n//                           </div>        \t\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\" for=\"defaultChecked\">Public</label>\n//                           <div class=\"col-xs-8\">\n//                             <input type=\"radio\" class=\"custom-control-input\" id=\"defaultChecked\" value = \"public\" name=\"defaultExampleRadios\" onClick={e => {setChannelType(e.target.value)}} checked/>\n//                           </div>\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <label class=\"control-label col-xs-4\" for=\"defaultUnchecked\">Private</label>\n//                           <div class=\"col-xs-8\">\n//                             <input type=\"radio\" class=\"custom-control-input\" id=\"defaultUnchecked\" value = \"private\" name=\"defaultExampleRadios\" onClick={e => {setChannelType(e.target.value)}}/>\n//                           </div>\n//                       </div>\n//                       <div id =\"update-response\" class=\"text-center\">\n//                           {/* <p style={{color: this.state.color}}>{this.state.message}</p> */}\n//                       </div>\n//                       <div class=\"form-group\">\n//                           <div class=\"col-xs-8 col-xs-offset-4\">\n//                               <button class=\"btn btn-primary btn-sm\" onClick={e => postChannels(e)}>Create</button>\n//                           </div>  \n//                           <div class=\"col-xs-8 col-xs-offset-4\">\n//                           <button type=\"button\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\"\n//                           >\n//                               Cancel</button>\n//                       </div> \n//                       </div>\t\n//                   </form>\n//               </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n// }\nexport default class ConversationList extends Component {\n    static contextType = AuthContext\n    constructor(props) {\n      super(props);\n      this.state = {\n        conversations: [],\n        currentChannel: this.props.currentChannel\n      }\n      this.updateCurrentChannel = this.updateCurrentChannel.bind(this);\n    }\n\n    componentDidMount() {\n      const {auth} = this.context\n      axios.get('https://localhost:4000/v1/channels', \n      {\n        headers: {\n          \"Authorization\": auth.token\n        }\n      }\n      ).then(response => {\n          let channels = response.data.map(results => {\n            return {\n              name: results.name,\n              description: results.description,\n              channelID: results.id\n            }\n          })\n          this.setState({conversations: channels});\n      });\n    }\n\n  // postChannels = (e) => {\n  //   const {auth} = this.context\n  //   e.preventDefault();\n  //   Axios({\n  //     method: 'POST', \n  //     url: \"https://localhost:4000/v1/channels\",\n  //     headers: {\n  //         Authorization: auth.token\n  //     },\n  //     data: {\n  //         name: name,\n  //         description: description,\n  //         private: channelType == \"private\"\n  //     }\n  //   }).then(result => {\n  //       if (result.status == 200) {\n  //         window.location.reload(false);\n  //       }\n  //   }).catch(e => {\n  //       console.log(e);\n  //   })\n  //  } \n\n    updateCurrentChannel= (e, channelID) => {\n      e.preventDefault();\n      this.setState({currentChannel: channelID});\n    }\n   render() {\n    return (\n      <div className=\"conversation-list\">\n        <Toolbar\n          title=\"Channels\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            // <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 8 8\"data-toggle=\"modal\" data-target=\"#channelModal\" data-whatever=\"@mdo\" >\n              <path d=\"M3 0v3h-3v2h3v3h2v-3h3v-2h-3v-3h-2z\" />\n            </svg>\n          ]}\n        />\n        <ConversationSearch />\n        {\n          this.state.conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.name}\n              data={conversation}\n              updateCurrentChannel={this.updateCurrentChannel}\n            />\n          )\n        }\n        {/* <div class=\"signup-form\">\n          <div class=\"modal fade\" id=\"channelModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n              <div class=\"modal-dialog\" role=\"document\">\n                  <form class=\"form-horizontal\">\n                      <div class=\"col-xs-8 col-xs-offset-4\">\n                          <h2>Create Channel</h2>\n                      </div>\t\t\n                      <div class=\"form-group\">\n                          <label class=\"control-label col-xs-4\">Channel Name</label>\n                          <div class=\"col-xs-8\">\n                              <input type=\"text\" class=\"form-control\" name=\"channel_name\" required=\"required\" value ={name} onChange={e => {this.setChannelName(e.target.value)}}/>\n                          </div>        \t\n                      </div>\n                      <div class=\"form-group\">\n                          <label class=\"control-label col-xs-4\">Description</label>\n                          <div class=\"col-xs-8\">\n                              <input type=\"text\" class=\"form-control\" name=\"channel_description\" value ={description} onChange={e => {this.setDescription(e.target.value)}}\n                              />\n                          </div>        \t\n                      </div>\n                      <div class=\"form-group\">\n                          <label class=\"control-label col-xs-4\" for=\"defaultChecked\">Public</label>\n                          <div class=\"col-xs-8\">\n                            <input type=\"radio\" class=\"custom-control-input\" id=\"defaultChecked\" value = \"public\" name=\"defaultExampleRadios\" onClick={e => {this.setChannelType(e.target.value)}} checked/>\n                          </div>\n                      </div>\n                      <div class=\"form-group\">\n                          <label class=\"control-label col-xs-4\" for=\"defaultUnchecked\">Private</label>\n                          <div class=\"col-xs-8\">\n                            <input type=\"radio\" class=\"custom-control-input\" id=\"defaultUnchecked\" value = \"private\" name=\"defaultExampleRadios\" onClick={e => {this.setChannelType(e.target.value)}}/>\n                          </div>\n                      </div>\n                      <div id =\"update-response\" class=\"text-center\">\n                          {/* <p style={{color: this.state.color}}>{this.state.message}</p> */}\n                      {/* </div>\n                      <div class=\"form-group\">\n                          <div class=\"col-xs-8 col-xs-offset-4\">\n                              <button class=\"btn btn-primary btn-sm\" onClick={e => this.postChannels(e)}>Create</button>\n                          </div>  \n                          <div class=\"col-xs-8 col-xs-offset-4\">\n                          <button type=\"button\" class=\"btn btn-primary btn-sm\" data-dismiss=\"modal\"\n                          >\n                              Cancel</button>\n                      </div> \n                      </div>\t\n                  </form>\n              </div>\n          </div>\n        </div> */}\n      </div>\n    );\n   }\n}"]},"metadata":{},"sourceType":"module"}