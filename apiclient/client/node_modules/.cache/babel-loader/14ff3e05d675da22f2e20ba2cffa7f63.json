{"ast":null,"code":"import React, { useEffect, useState, useContext, Component } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext';\nimport './MessageList.css';\nimport axios from 'axios';\nimport AuthContext from '../../context/AuthContext'; // export default function MessageList(props) {\n//   const MY_USER_ID = 'apple';\n//   const [messages, setMessages] = useState([])\n//   const authentication = useContext(AuthContext);\n//   // const channel = useContext(ChannelContext)\n//   useEffect(() => {\n//     getMessages();\n//   },[])\n//   const getMessages = () => {\n//       axios.get('https://localhost:4000/v1/channels/'+ props.currentChannel, \n//       {\n//         headers: {\n//           \"Authorization\": authentication.auth.token\n//         }\n//       }\n//       ).then(response => {\n//           let msgs = response.data.map(results => {\n//             return {\n//               author: 'apple',\n//               message: results.body,\n//               timestamp: results.createdAt,\n//             }\n//           })\n//           setMessages([...messages, ...msgs])\n//       });\n//     }\n//   const renderMessages = () => {\n//     let i = 0;\n//     let messageCount = messages.length;\n//     let tempMessages = [];\n//     while (i < messageCount) {\n//       let previous = messages[i - 1];\n//       let current = messages[i];\n//       let next = messages[i + 1];\n//       let isMine = current.author === MY_USER_ID;\n//       let currentMoment = moment(current.timestamp);\n//       let prevBySameAuthor = false;\n//       let nextBySameAuthor = false;\n//       let startsSequence = true;\n//       let endsSequence = true;\n//       let showTimestamp = true;\n//       if (previous) {\n//         let previousMoment = moment(previous.timestamp);\n//         let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n//         prevBySameAuthor = previous.author === current.author;\n//         if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n//           startsSequence = false;\n//         }\n//         if (previousDuration.as('hours') < 1) {\n//           showTimestamp = false;\n//         }\n//       }\n//       if (next) {\n//         let nextMoment = moment(next.timestamp);\n//         let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n//         nextBySameAuthor = next.author === current.author;\n//         if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n//           endsSequence = false;\n//         }\n//       }\n//       tempMessages.push(\n//         <Message\n//           key={i}\n//           isMine={isMine}\n//           startsSequence={startsSequence}\n//           endsSequence={endsSequence}\n//           showTimestamp={showTimestamp}\n//           data={current}\n//         />\n//       );\n//       // Proceed to the next message.\n//       i += 1;\n//     }\n//     return tempMessages;\n//   }\n//     return(\n//       <div className=\"message-list\">\n//         <Toolbar\n//           title=\"Conversation Title\"\n//           rightItems={[\n//             <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n//             <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n//             <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n//           ]}\n//         />\n//         <div className=\"message-list-container\">{\n//           renderMessages()\n//         }</div>\n//         <Compose rightItems={[\n//           <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n//           <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n//           <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n//           <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n//           <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n//           <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n//         ]}/>\n//       </div>\n//     );\n// }","map":{"version":3,"sources":["/Users/willhwang/go/src/github.com/will-slack/apiclient/client/src/components/MessageList/index.js"],"names":["React","useEffect","useState","useContext","Component","Compose","Toolbar","ToolbarButton","Message","moment","ChannelContext","axios","AuthContext"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,SAAhD,QAAgE,OAAhE;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxsourcesContent":["import React, {useEffect, useState, useContext, Component} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport ChannelContext from '../../context/ChannelContext'\nimport './MessageList.css';\nimport axios from 'axios';\nimport AuthContext from '../../context/AuthContext';\n\n\n// export default function MessageList(props) {\n//   const MY_USER_ID = 'apple';\n//   const [messages, setMessages] = useState([])\n//   const authentication = useContext(AuthContext);\n//   // const channel = useContext(ChannelContext)\n//   useEffect(() => {\n//     getMessages();\n//   },[])\n  \n//   const getMessages = () => {\n//       axios.get('https://localhost:4000/v1/channels/'+ props.currentChannel, \n//       {\n//         headers: {\n//           \"Authorization\": authentication.auth.token\n//         }\n//       }\n//       ).then(response => {\n//           let msgs = response.data.map(results => {\n//             return {\n//               author: 'apple',\n//               message: results.body,\n//               timestamp: results.createdAt,\n//             }\n//           })\n//           setMessages([...messages, ...msgs])\n//       });\n//     }\n\n//   const renderMessages = () => {\n//     let i = 0;\n//     let messageCount = messages.length;\n//     let tempMessages = [];\n\n//     while (i < messageCount) {\n//       let previous = messages[i - 1];\n//       let current = messages[i];\n//       let next = messages[i + 1];\n//       let isMine = current.author === MY_USER_ID;\n//       let currentMoment = moment(current.timestamp);\n//       let prevBySameAuthor = false;\n//       let nextBySameAuthor = false;\n//       let startsSequence = true;\n//       let endsSequence = true;\n//       let showTimestamp = true;\n\n//       if (previous) {\n//         let previousMoment = moment(previous.timestamp);\n//         let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n//         prevBySameAuthor = previous.author === current.author;\n        \n//         if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n//           startsSequence = false;\n//         }\n\n//         if (previousDuration.as('hours') < 1) {\n//           showTimestamp = false;\n//         }\n//       }\n\n//       if (next) {\n//         let nextMoment = moment(next.timestamp);\n//         let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n//         nextBySameAuthor = next.author === current.author;\n\n//         if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n//           endsSequence = false;\n//         }\n//       }\n\n//       tempMessages.push(\n//         <Message\n//           key={i}\n//           isMine={isMine}\n//           startsSequence={startsSequence}\n//           endsSequence={endsSequence}\n//           showTimestamp={showTimestamp}\n//           data={current}\n//         />\n//       );\n\n//       // Proceed to the next message.\n//       i += 1;\n//     }\n\n//     return tempMessages;\n//   }\n\n//     return(\n//       <div className=\"message-list\">\n//         <Toolbar\n//           title=\"Conversation Title\"\n//           rightItems={[\n//             <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n//             <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n//             <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n//           ]}\n//         />\n\n//         <div className=\"message-list-container\">{\n//           renderMessages()\n//         }</div>\n\n//         <Compose rightItems={[\n//           <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n//           <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n//           <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n//           <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n//           <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n//           <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n//         ]}/>\n//       </div>\n//     );\n// }\n"]},"metadata":{},"sourceType":"module"}